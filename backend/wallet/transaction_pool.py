from backend.wallet.transaction import Transaction
from backend.blockchain.blockchain import Blockchain


class TransactionPool():

    def __init__(self):
        self.transaction_map = {}
    

    def get_transactions_as_json(self):
        """
        Returns transactions of transaction-pool in json 
        """
        transactions = self.transaction_map.values() 
        transactions_json = list(map( lambda t: t.to_json(), transactions )) 
        return transactions_json


    def set_transaction(self, transaction: Transaction):
        """
        Set a transaction in the transaction pool
        """
        self.transaction_map[transaction.id] = transaction


    def existing_transaction(self, address):
        """
        Find a transaction generated by the address in the transaction pool
        """
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:
                return transaction
        return None 


    def clear_blockchain_transactions(self, blockchain: Blockchain):
        for block in blockchain.chain: 
            for transaction in block.data: 
                if "id" in transaction and transaction['id'] in self.transaction_map: 
                    del self.transaction_map[transaction['id']]


